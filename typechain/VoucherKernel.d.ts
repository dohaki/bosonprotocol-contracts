/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface VoucherKernelContract
  extends Truffle.Contract<VoucherKernelInstance> {
  "new"(
    _tokensContract: string,
    meta?: Truffle.TransactionDetails
  ): Promise<VoucherKernelInstance>;
}

export interface LogBosonRouterSet {
  name: "LogBosonRouterSet";
  args: {
    _newBosonRouter: string;
    _triggeredBy: string;
    0: string;
    1: string;
  };
}

export interface LogCancelFaultPeriodChanged {
  name: "LogCancelFaultPeriodChanged";
  args: {
    _newCancelFaultPeriod: BN;
    _triggeredBy: string;
    0: BN;
    1: string;
  };
}

export interface LogCashierSet {
  name: "LogCashierSet";
  args: {
    _newCashier: string;
    _triggeredBy: string;
    0: string;
    1: string;
  };
}

export interface LogComplainPeriodChanged {
  name: "LogComplainPeriodChanged";
  args: {
    _newComplainPeriod: BN;
    _triggeredBy: string;
    0: BN;
    1: string;
  };
}

export interface LogExpirationTriggered {
  name: "LogExpirationTriggered";
  args: {
    _tokenIdVoucher: BN;
    _triggeredBy: string;
    0: BN;
    1: string;
  };
}

export interface LogFinalizeVoucher {
  name: "LogFinalizeVoucher";
  args: {
    _tokenIdVoucher: BN;
    _triggeredBy: string;
    0: BN;
    1: string;
  };
}

export interface LogFundsReleased {
  name: "LogFundsReleased";
  args: {
    _tokenIdVoucher: BN;
    _type: BN;
    0: BN;
    1: BN;
  };
}

export interface LogPromiseCreated {
  name: "LogPromiseCreated";
  args: {
    _promiseId: string;
    _nonce: BN;
    _seller: string;
    _validFrom: BN;
    _validTo: BN;
    _idx: BN;
    0: string;
    1: BN;
    2: string;
    3: BN;
    4: BN;
    5: BN;
  };
}

export interface LogVoucherComplain {
  name: "LogVoucherComplain";
  args: {
    _tokenIdVoucher: BN;
    0: BN;
  };
}

export interface LogVoucherDelivered {
  name: "LogVoucherDelivered";
  args: {
    _tokenIdSupply: BN;
    _tokenIdVoucher: BN;
    _issuer: string;
    _holder: string;
    _promiseId: string;
    _correlationId: BN;
    0: BN;
    1: BN;
    2: string;
    3: string;
    4: string;
    5: BN;
  };
}

export interface LogVoucherFaultCancel {
  name: "LogVoucherFaultCancel";
  args: {
    _tokenIdVoucher: BN;
    0: BN;
  };
}

export interface LogVoucherRedeemed {
  name: "LogVoucherRedeemed";
  args: {
    _tokenIdVoucher: BN;
    _holder: string;
    _promiseId: string;
    0: BN;
    1: string;
    2: string;
  };
}

export interface LogVoucherRefunded {
  name: "LogVoucherRefunded";
  args: {
    _tokenIdVoucher: BN;
    0: BN;
  };
}

export interface LogVoucherSetFaultCancel {
  name: "LogVoucherSetFaultCancel";
  args: {
    _tokenIdSupply: BN;
    _issuer: string;
    0: BN;
    1: string;
  };
}

export interface OwnershipTransferred {
  name: "OwnershipTransferred";
  args: {
    previousOwner: string;
    newOwner: string;
    0: string;
    1: string;
  };
}

export interface Paused {
  name: "Paused";
  args: {
    account: string;
    0: string;
  };
}

export interface Unpaused {
  name: "Unpaused";
  args: {
    account: string;
    0: string;
  };
}

type AllEvents =
  | LogBosonRouterSet
  | LogCancelFaultPeriodChanged
  | LogCashierSet
  | LogComplainPeriodChanged
  | LogExpirationTriggered
  | LogFinalizeVoucher
  | LogFundsReleased
  | LogPromiseCreated
  | LogVoucherComplain
  | LogVoucherDelivered
  | LogVoucherFaultCancel
  | LogVoucherRedeemed
  | LogVoucherRefunded
  | LogVoucherSetFaultCancel
  | OwnershipTransferred
  | Paused
  | Unpaused;

export interface VoucherKernelInstance extends Truffle.ContractInstance {
  MASK_NF_INDEX(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  MASK_TYPE(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  TYPE_NF_BIT(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  bosonRouterAddress(txDetails?: Truffle.TransactionDetails): Promise<string>;

  burnSupplyOnPause: {
    (
      _issuer: string,
      _tokenIdSupply: number | BN | string,
      _qty: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _issuer: string,
      _tokenIdSupply: number | BN | string,
      _qty: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _issuer: string,
      _tokenIdSupply: number | BN | string,
      _qty: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _issuer: string,
      _tokenIdSupply: number | BN | string,
      _qty: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  cancelFaultPeriod(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  cancelOrFault: {
    (
      _tokenIdVoucher: number | BN | string,
      _msgSender: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _tokenIdVoucher: number | BN | string,
      _msgSender: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _tokenIdVoucher: number | BN | string,
      _msgSender: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _tokenIdVoucher: number | BN | string,
      _msgSender: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  cancelOrFaultVoucherSet: {
    (
      _tokenIdSupply: number | BN | string,
      _issuer: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _tokenIdSupply: number | BN | string,
      _issuer: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _tokenIdSupply: number | BN | string,
      _issuer: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _tokenIdSupply: number | BN | string,
      _issuer: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  cashierAddress(txDetails?: Truffle.TransactionDetails): Promise<string>;

  complain: {
    (
      _tokenIdVoucher: number | BN | string,
      _msgSender: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _tokenIdVoucher: number | BN | string,
      _msgSender: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _tokenIdVoucher: number | BN | string,
      _msgSender: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _tokenIdVoucher: number | BN | string,
      _msgSender: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  complainPeriod(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  createPaymentMethod: {
    (
      _tokenIdSupply: number | BN | string,
      _paymentMethod: number | BN | string,
      _tokenPrice: string,
      _tokenDeposits: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _tokenIdSupply: number | BN | string,
      _paymentMethod: number | BN | string,
      _tokenPrice: string,
      _tokenDeposits: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _tokenIdSupply: number | BN | string,
      _paymentMethod: number | BN | string,
      _tokenPrice: string,
      _tokenDeposits: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _tokenIdSupply: number | BN | string,
      _paymentMethod: number | BN | string,
      _tokenPrice: string,
      _tokenDeposits: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  createTokenSupplyID: {
    (
      _seller: string,
      _validFrom: number | BN | string,
      _validTo: number | BN | string,
      _price: number | BN | string,
      _depositSe: number | BN | string,
      _depositBu: number | BN | string,
      _quantity: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _seller: string,
      _validFrom: number | BN | string,
      _validTo: number | BN | string,
      _price: number | BN | string,
      _depositSe: number | BN | string,
      _depositBu: number | BN | string,
      _quantity: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _seller: string,
      _validFrom: number | BN | string,
      _validTo: number | BN | string,
      _price: number | BN | string,
      _depositSe: number | BN | string,
      _depositBu: number | BN | string,
      _quantity: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _seller: string,
      _validFrom: number | BN | string,
      _validTo: number | BN | string,
      _price: number | BN | string,
      _depositSe: number | BN | string,
      _depositBu: number | BN | string,
      _quantity: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  fillOrder: {
    (
      _tokenIdSupply: number | BN | string,
      _issuer: string,
      _holder: string,
      _paymentMethod: number | BN | string,
      _correlationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _tokenIdSupply: number | BN | string,
      _issuer: string,
      _holder: string,
      _paymentMethod: number | BN | string,
      _correlationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _tokenIdSupply: number | BN | string,
      _issuer: string,
      _holder: string,
      _paymentMethod: number | BN | string,
      _correlationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _tokenIdSupply: number | BN | string,
      _issuer: string,
      _holder: string,
      _paymentMethod: number | BN | string,
      _correlationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getBuyerOrderCosts(
    _tokenIdSupply: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN }>;

  getIdSupplyFromVoucher(
    _tokenIdVoucher: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getOrderCosts(
    _tokenIdSupply: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN; 2: BN }>;

  getPromiseIdFromVoucherId(
    _tokenIdVoucher: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getPromiseKey(
    _idx: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getRemQtyForSupply(
    _tokenSupplyId: number | BN | string,
    _owner: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getSellerDeposit(
    _tokenIdSupply: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getSupplyHolder(
    _tokenIdSupply: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getVoucherDepositToken(
    _tokenIdSupply: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getVoucherHolder(
    _tokenIdVoucher: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getVoucherPaymentMethod(
    _tokenIdSupply: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getVoucherPriceToken(
    _tokenIdSupply: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getVoucherStatus(
    _tokenIdVoucher: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: boolean; 2: boolean }>;

  isInValidityPeriod(
    _tokenIdVoucher: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isVoucherTransferable(
    _tokenIdVoucher: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  ordersPromise(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  pause: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  paused(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  paymentDetails(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: string; 2: string }>;

  promiseKeys(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  promises(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    0: string;
    1: BN;
    2: string;
    3: BN;
    4: BN;
    5: BN;
    6: BN;
    7: BN;
    8: BN;
  }>;

  redeem: {
    (
      _tokenIdVoucher: number | BN | string,
      _msgSender: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _tokenIdVoucher: number | BN | string,
      _msgSender: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _tokenIdVoucher: number | BN | string,
      _msgSender: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _tokenIdVoucher: number | BN | string,
      _msgSender: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  refund: {
    (
      _tokenIdVoucher: number | BN | string,
      _msgSender: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _tokenIdVoucher: number | BN | string,
      _msgSender: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _tokenIdVoucher: number | BN | string,
      _msgSender: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _tokenIdVoucher: number | BN | string,
      _msgSender: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setBosonRouterAddress: {
    (
      _bosonRouterAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _bosonRouterAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _bosonRouterAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _bosonRouterAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setCancelFaultPeriod: {
    (
      _cancelFaultPeriod: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _cancelFaultPeriod: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _cancelFaultPeriod: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _cancelFaultPeriod: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setCashierAddress: {
    (_cashierAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _cashierAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _cashierAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _cashierAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setComplainPeriod: {
    (
      _complainPeriod: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _complainPeriod: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _complainPeriod: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _complainPeriod: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setDepositsReleased: {
    (
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setPaymentReleased: {
    (
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setSupplyHolderOnTransfer: {
    (
      _tokenIdSupply: number | BN | string,
      _newSeller: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _tokenIdSupply: number | BN | string,
      _newSeller: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _tokenIdSupply: number | BN | string,
      _newSeller: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _tokenIdSupply: number | BN | string,
      _newSeller: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  tokenNonces(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  tokensContract(txDetails?: Truffle.TransactionDetails): Promise<string>;

  transferOwnership: {
    (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  triggerExpiration: {
    (
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  triggerFinalizeVoucher: {
    (
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  typeCounters(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  typeId(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  unpause: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  vouchersStatus(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: boolean; 2: boolean; 3: BN; 4: BN }>;

  methods: {
    MASK_NF_INDEX(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    MASK_TYPE(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    TYPE_NF_BIT(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    bosonRouterAddress(txDetails?: Truffle.TransactionDetails): Promise<string>;

    burnSupplyOnPause: {
      (
        _issuer: string,
        _tokenIdSupply: number | BN | string,
        _qty: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _issuer: string,
        _tokenIdSupply: number | BN | string,
        _qty: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _issuer: string,
        _tokenIdSupply: number | BN | string,
        _qty: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _issuer: string,
        _tokenIdSupply: number | BN | string,
        _qty: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    cancelFaultPeriod(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    cancelOrFault: {
      (
        _tokenIdVoucher: number | BN | string,
        _msgSender: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _tokenIdVoucher: number | BN | string,
        _msgSender: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _tokenIdVoucher: number | BN | string,
        _msgSender: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _tokenIdVoucher: number | BN | string,
        _msgSender: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    cancelOrFaultVoucherSet: {
      (
        _tokenIdSupply: number | BN | string,
        _issuer: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _tokenIdSupply: number | BN | string,
        _issuer: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _tokenIdSupply: number | BN | string,
        _issuer: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _tokenIdSupply: number | BN | string,
        _issuer: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    cashierAddress(txDetails?: Truffle.TransactionDetails): Promise<string>;

    complain: {
      (
        _tokenIdVoucher: number | BN | string,
        _msgSender: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _tokenIdVoucher: number | BN | string,
        _msgSender: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _tokenIdVoucher: number | BN | string,
        _msgSender: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _tokenIdVoucher: number | BN | string,
        _msgSender: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    complainPeriod(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    createPaymentMethod: {
      (
        _tokenIdSupply: number | BN | string,
        _paymentMethod: number | BN | string,
        _tokenPrice: string,
        _tokenDeposits: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _tokenIdSupply: number | BN | string,
        _paymentMethod: number | BN | string,
        _tokenPrice: string,
        _tokenDeposits: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _tokenIdSupply: number | BN | string,
        _paymentMethod: number | BN | string,
        _tokenPrice: string,
        _tokenDeposits: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _tokenIdSupply: number | BN | string,
        _paymentMethod: number | BN | string,
        _tokenPrice: string,
        _tokenDeposits: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    createTokenSupplyID: {
      (
        _seller: string,
        _validFrom: number | BN | string,
        _validTo: number | BN | string,
        _price: number | BN | string,
        _depositSe: number | BN | string,
        _depositBu: number | BN | string,
        _quantity: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _seller: string,
        _validFrom: number | BN | string,
        _validTo: number | BN | string,
        _price: number | BN | string,
        _depositSe: number | BN | string,
        _depositBu: number | BN | string,
        _quantity: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _seller: string,
        _validFrom: number | BN | string,
        _validTo: number | BN | string,
        _price: number | BN | string,
        _depositSe: number | BN | string,
        _depositBu: number | BN | string,
        _quantity: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _seller: string,
        _validFrom: number | BN | string,
        _validTo: number | BN | string,
        _price: number | BN | string,
        _depositSe: number | BN | string,
        _depositBu: number | BN | string,
        _quantity: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    fillOrder: {
      (
        _tokenIdSupply: number | BN | string,
        _issuer: string,
        _holder: string,
        _paymentMethod: number | BN | string,
        _correlationId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _tokenIdSupply: number | BN | string,
        _issuer: string,
        _holder: string,
        _paymentMethod: number | BN | string,
        _correlationId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _tokenIdSupply: number | BN | string,
        _issuer: string,
        _holder: string,
        _paymentMethod: number | BN | string,
        _correlationId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _tokenIdSupply: number | BN | string,
        _issuer: string,
        _holder: string,
        _paymentMethod: number | BN | string,
        _correlationId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getBuyerOrderCosts(
      _tokenIdSupply: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN }>;

    getIdSupplyFromVoucher(
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getOrderCosts(
      _tokenIdSupply: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN; 2: BN }>;

    getPromiseIdFromVoucherId(
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    getPromiseKey(
      _idx: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    getRemQtyForSupply(
      _tokenSupplyId: number | BN | string,
      _owner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getSellerDeposit(
      _tokenIdSupply: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getSupplyHolder(
      _tokenIdSupply: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    getVoucherDepositToken(
      _tokenIdSupply: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    getVoucherHolder(
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    getVoucherPaymentMethod(
      _tokenIdSupply: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getVoucherPriceToken(
      _tokenIdSupply: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    getVoucherStatus(
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: boolean; 2: boolean }>;

    isInValidityPeriod(
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    isVoucherTransferable(
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    ordersPromise(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

    pause: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    paused(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    paymentDetails(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: string; 2: string }>;

    promiseKeys(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    promises(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      0: string;
      1: BN;
      2: string;
      3: BN;
      4: BN;
      5: BN;
      6: BN;
      7: BN;
      8: BN;
    }>;

    redeem: {
      (
        _tokenIdVoucher: number | BN | string,
        _msgSender: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _tokenIdVoucher: number | BN | string,
        _msgSender: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _tokenIdVoucher: number | BN | string,
        _msgSender: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _tokenIdVoucher: number | BN | string,
        _msgSender: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    refund: {
      (
        _tokenIdVoucher: number | BN | string,
        _msgSender: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _tokenIdVoucher: number | BN | string,
        _msgSender: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _tokenIdVoucher: number | BN | string,
        _msgSender: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _tokenIdVoucher: number | BN | string,
        _msgSender: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    renounceOwnership: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    setBosonRouterAddress: {
      (
        _bosonRouterAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _bosonRouterAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _bosonRouterAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _bosonRouterAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setCancelFaultPeriod: {
      (
        _cancelFaultPeriod: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _cancelFaultPeriod: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _cancelFaultPeriod: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _cancelFaultPeriod: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setCashierAddress: {
      (
        _cashierAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _cashierAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _cashierAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _cashierAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setComplainPeriod: {
      (
        _complainPeriod: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _complainPeriod: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _complainPeriod: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _complainPeriod: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setDepositsReleased: {
      (
        _tokenIdVoucher: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _tokenIdVoucher: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _tokenIdVoucher: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _tokenIdVoucher: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setPaymentReleased: {
      (
        _tokenIdVoucher: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _tokenIdVoucher: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _tokenIdVoucher: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _tokenIdVoucher: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setSupplyHolderOnTransfer: {
      (
        _tokenIdSupply: number | BN | string,
        _newSeller: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _tokenIdSupply: number | BN | string,
        _newSeller: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _tokenIdSupply: number | BN | string,
        _newSeller: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _tokenIdSupply: number | BN | string,
        _newSeller: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    tokenNonces(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    tokensContract(txDetails?: Truffle.TransactionDetails): Promise<string>;

    transferOwnership: {
      (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    triggerExpiration: {
      (
        _tokenIdVoucher: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _tokenIdVoucher: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _tokenIdVoucher: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _tokenIdVoucher: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    triggerFinalizeVoucher: {
      (
        _tokenIdVoucher: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _tokenIdVoucher: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _tokenIdVoucher: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _tokenIdVoucher: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    typeCounters(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    typeId(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    unpause: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    vouchersStatus(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: boolean; 2: boolean; 3: BN; 4: BN }>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
