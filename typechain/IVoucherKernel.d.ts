/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IVoucherKernelContract
  extends Truffle.Contract<IVoucherKernelInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IVoucherKernelInstance>;
}

type AllEvents = never;

export interface IVoucherKernelInstance extends Truffle.ContractInstance {
  burnSupplyOnPause: {
    (
      _issuer: string,
      _tokenIdSupply: number | BN | string,
      _qty: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _issuer: string,
      _tokenIdSupply: number | BN | string,
      _qty: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _issuer: string,
      _tokenIdSupply: number | BN | string,
      _qty: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _issuer: string,
      _tokenIdSupply: number | BN | string,
      _qty: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  cancelOrFault: {
    (
      _tokenIdVoucher: number | BN | string,
      _msgSender: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _tokenIdVoucher: number | BN | string,
      _msgSender: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _tokenIdVoucher: number | BN | string,
      _msgSender: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _tokenIdVoucher: number | BN | string,
      _msgSender: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  cancelOrFaultVoucherSet: {
    (
      _tokenIdSupply: number | BN | string,
      _issuer: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _tokenIdSupply: number | BN | string,
      _issuer: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _tokenIdSupply: number | BN | string,
      _issuer: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _tokenIdSupply: number | BN | string,
      _issuer: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  complain: {
    (
      _tokenIdVoucher: number | BN | string,
      _msgSender: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _tokenIdVoucher: number | BN | string,
      _msgSender: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _tokenIdVoucher: number | BN | string,
      _msgSender: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _tokenIdVoucher: number | BN | string,
      _msgSender: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  createPaymentMethod: {
    (
      _tokenIdSupply: number | BN | string,
      _paymentMethod: number | BN | string,
      _tokenPrice: string,
      _tokenDeposits: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _tokenIdSupply: number | BN | string,
      _paymentMethod: number | BN | string,
      _tokenPrice: string,
      _tokenDeposits: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _tokenIdSupply: number | BN | string,
      _paymentMethod: number | BN | string,
      _tokenPrice: string,
      _tokenDeposits: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _tokenIdSupply: number | BN | string,
      _paymentMethod: number | BN | string,
      _tokenPrice: string,
      _tokenDeposits: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  createTokenSupplyID: {
    (
      _seller: string,
      _validFrom: number | BN | string,
      _validTo: number | BN | string,
      _price: number | BN | string,
      _depositSe: number | BN | string,
      _depositBu: number | BN | string,
      _quantity: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _seller: string,
      _validFrom: number | BN | string,
      _validTo: number | BN | string,
      _price: number | BN | string,
      _depositSe: number | BN | string,
      _depositBu: number | BN | string,
      _quantity: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _seller: string,
      _validFrom: number | BN | string,
      _validTo: number | BN | string,
      _price: number | BN | string,
      _depositSe: number | BN | string,
      _depositBu: number | BN | string,
      _quantity: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _seller: string,
      _validFrom: number | BN | string,
      _validTo: number | BN | string,
      _price: number | BN | string,
      _depositSe: number | BN | string,
      _depositBu: number | BN | string,
      _quantity: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  fillOrder: {
    (
      _tokenIdSupply: number | BN | string,
      _issuer: string,
      _holder: string,
      _paymentMethod: number | BN | string,
      _correlationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _tokenIdSupply: number | BN | string,
      _issuer: string,
      _holder: string,
      _paymentMethod: number | BN | string,
      _correlationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _tokenIdSupply: number | BN | string,
      _issuer: string,
      _holder: string,
      _paymentMethod: number | BN | string,
      _correlationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _tokenIdSupply: number | BN | string,
      _issuer: string,
      _holder: string,
      _paymentMethod: number | BN | string,
      _correlationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getBuyerOrderCosts(
    _tokenIdSupply: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN }>;

  getIdSupplyFromVoucher(
    _tokenIdVoucher: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getOrderCosts(
    _tokenIdSupply: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN; 2: BN }>;

  getPromiseIdFromVoucherId(
    _tokenIdVoucher: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getPromiseKey(
    _idx: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getRemQtyForSupply(
    _tokenSupplyId: number | BN | string,
    _owner: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getSellerDeposit(
    _tokenIdSupply: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getSupplyHolder(
    _tokenIdSupply: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getVoucherDepositToken(
    _tokenIdSupply: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getVoucherHolder(
    _tokenIdVoucher: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getVoucherPaymentMethod(
    _tokenIdSupply: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getVoucherPriceToken(
    _tokenIdSupply: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getVoucherStatus(
    _tokenIdVoucher: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: boolean; 2: boolean }>;

  isInValidityPeriod(
    _tokenIdVoucher: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isVoucherTransferable(
    _tokenIdVoucher: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  pause: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  redeem: {
    (
      _tokenIdVoucher: number | BN | string,
      _msgSender: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _tokenIdVoucher: number | BN | string,
      _msgSender: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _tokenIdVoucher: number | BN | string,
      _msgSender: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _tokenIdVoucher: number | BN | string,
      _msgSender: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  refund: {
    (
      _tokenIdVoucher: number | BN | string,
      _msgSender: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _tokenIdVoucher: number | BN | string,
      _msgSender: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _tokenIdVoucher: number | BN | string,
      _msgSender: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _tokenIdVoucher: number | BN | string,
      _msgSender: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setCancelFaultPeriod: {
    (
      _cancelFaultPeriod: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _cancelFaultPeriod: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _cancelFaultPeriod: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _cancelFaultPeriod: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setCashierAddress: {
    (_cashierAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _cashierAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _cashierAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _cashierAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setComplainPeriod: {
    (
      _complainPeriod: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _complainPeriod: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _complainPeriod: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _complainPeriod: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setDepositsReleased: {
    (
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setPaymentReleased: {
    (
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setSupplyHolderOnTransfer: {
    (
      _tokenIdSupply: number | BN | string,
      _newSeller: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _tokenIdSupply: number | BN | string,
      _newSeller: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _tokenIdSupply: number | BN | string,
      _newSeller: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _tokenIdSupply: number | BN | string,
      _newSeller: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  triggerExpiration: {
    (
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  triggerFinalizeVoucher: {
    (
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  unpause: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  methods: {
    burnSupplyOnPause: {
      (
        _issuer: string,
        _tokenIdSupply: number | BN | string,
        _qty: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _issuer: string,
        _tokenIdSupply: number | BN | string,
        _qty: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _issuer: string,
        _tokenIdSupply: number | BN | string,
        _qty: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _issuer: string,
        _tokenIdSupply: number | BN | string,
        _qty: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    cancelOrFault: {
      (
        _tokenIdVoucher: number | BN | string,
        _msgSender: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _tokenIdVoucher: number | BN | string,
        _msgSender: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _tokenIdVoucher: number | BN | string,
        _msgSender: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _tokenIdVoucher: number | BN | string,
        _msgSender: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    cancelOrFaultVoucherSet: {
      (
        _tokenIdSupply: number | BN | string,
        _issuer: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _tokenIdSupply: number | BN | string,
        _issuer: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _tokenIdSupply: number | BN | string,
        _issuer: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _tokenIdSupply: number | BN | string,
        _issuer: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    complain: {
      (
        _tokenIdVoucher: number | BN | string,
        _msgSender: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _tokenIdVoucher: number | BN | string,
        _msgSender: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _tokenIdVoucher: number | BN | string,
        _msgSender: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _tokenIdVoucher: number | BN | string,
        _msgSender: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    createPaymentMethod: {
      (
        _tokenIdSupply: number | BN | string,
        _paymentMethod: number | BN | string,
        _tokenPrice: string,
        _tokenDeposits: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _tokenIdSupply: number | BN | string,
        _paymentMethod: number | BN | string,
        _tokenPrice: string,
        _tokenDeposits: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _tokenIdSupply: number | BN | string,
        _paymentMethod: number | BN | string,
        _tokenPrice: string,
        _tokenDeposits: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _tokenIdSupply: number | BN | string,
        _paymentMethod: number | BN | string,
        _tokenPrice: string,
        _tokenDeposits: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    createTokenSupplyID: {
      (
        _seller: string,
        _validFrom: number | BN | string,
        _validTo: number | BN | string,
        _price: number | BN | string,
        _depositSe: number | BN | string,
        _depositBu: number | BN | string,
        _quantity: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _seller: string,
        _validFrom: number | BN | string,
        _validTo: number | BN | string,
        _price: number | BN | string,
        _depositSe: number | BN | string,
        _depositBu: number | BN | string,
        _quantity: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _seller: string,
        _validFrom: number | BN | string,
        _validTo: number | BN | string,
        _price: number | BN | string,
        _depositSe: number | BN | string,
        _depositBu: number | BN | string,
        _quantity: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _seller: string,
        _validFrom: number | BN | string,
        _validTo: number | BN | string,
        _price: number | BN | string,
        _depositSe: number | BN | string,
        _depositBu: number | BN | string,
        _quantity: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    fillOrder: {
      (
        _tokenIdSupply: number | BN | string,
        _issuer: string,
        _holder: string,
        _paymentMethod: number | BN | string,
        _correlationId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _tokenIdSupply: number | BN | string,
        _issuer: string,
        _holder: string,
        _paymentMethod: number | BN | string,
        _correlationId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _tokenIdSupply: number | BN | string,
        _issuer: string,
        _holder: string,
        _paymentMethod: number | BN | string,
        _correlationId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _tokenIdSupply: number | BN | string,
        _issuer: string,
        _holder: string,
        _paymentMethod: number | BN | string,
        _correlationId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getBuyerOrderCosts(
      _tokenIdSupply: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN }>;

    getIdSupplyFromVoucher(
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getOrderCosts(
      _tokenIdSupply: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN; 2: BN }>;

    getPromiseIdFromVoucherId(
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    getPromiseKey(
      _idx: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    getRemQtyForSupply(
      _tokenSupplyId: number | BN | string,
      _owner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getSellerDeposit(
      _tokenIdSupply: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getSupplyHolder(
      _tokenIdSupply: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    getVoucherDepositToken(
      _tokenIdSupply: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    getVoucherHolder(
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    getVoucherPaymentMethod(
      _tokenIdSupply: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getVoucherPriceToken(
      _tokenIdSupply: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    getVoucherStatus(
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: boolean; 2: boolean }>;

    isInValidityPeriod(
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    isVoucherTransferable(
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    pause: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    redeem: {
      (
        _tokenIdVoucher: number | BN | string,
        _msgSender: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _tokenIdVoucher: number | BN | string,
        _msgSender: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _tokenIdVoucher: number | BN | string,
        _msgSender: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _tokenIdVoucher: number | BN | string,
        _msgSender: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    refund: {
      (
        _tokenIdVoucher: number | BN | string,
        _msgSender: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _tokenIdVoucher: number | BN | string,
        _msgSender: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _tokenIdVoucher: number | BN | string,
        _msgSender: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _tokenIdVoucher: number | BN | string,
        _msgSender: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setCancelFaultPeriod: {
      (
        _cancelFaultPeriod: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _cancelFaultPeriod: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _cancelFaultPeriod: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _cancelFaultPeriod: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setCashierAddress: {
      (
        _cashierAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _cashierAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _cashierAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _cashierAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setComplainPeriod: {
      (
        _complainPeriod: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _complainPeriod: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _complainPeriod: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _complainPeriod: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setDepositsReleased: {
      (
        _tokenIdVoucher: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _tokenIdVoucher: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _tokenIdVoucher: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _tokenIdVoucher: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setPaymentReleased: {
      (
        _tokenIdVoucher: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _tokenIdVoucher: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _tokenIdVoucher: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _tokenIdVoucher: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setSupplyHolderOnTransfer: {
      (
        _tokenIdSupply: number | BN | string,
        _newSeller: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _tokenIdSupply: number | BN | string,
        _newSeller: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _tokenIdSupply: number | BN | string,
        _newSeller: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _tokenIdSupply: number | BN | string,
        _newSeller: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    triggerExpiration: {
      (
        _tokenIdVoucher: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _tokenIdVoucher: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _tokenIdVoucher: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _tokenIdVoucher: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    triggerFinalizeVoucher: {
      (
        _tokenIdVoucher: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _tokenIdVoucher: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _tokenIdVoucher: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _tokenIdVoucher: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    unpause: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
