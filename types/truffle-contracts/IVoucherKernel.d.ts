/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IVoucherKernelContract
  extends Truffle.Contract<IVoucherKernelInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IVoucherKernelInstance>;
}

type AllEvents = never;

export interface IVoucherKernelInstance extends Truffle.ContractInstance {
  /**
   * Pause the process of interaction with voucherID's (ERC-721), in case of emergency. Only Cashier contract is in control of this function.
   */
  pause: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * Unpause the process of interaction with voucherID's (ERC-721). Only Cashier contract is in control of this function.
   */
  unpause: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * Creating a new promise for goods or services. Can be reused, e.g. for making different batches of these (but not in prototype).
   * @param _depositBu Buyer's deposit
   * @param _depositSe Seller's deposit
   * @param _price Price (payment amount)
   * @param _seller seller of the promise
   * @param _validFrom Start of valid period
   * @param _validTo End of valid period
   */
  createTokenSupplyID: {
    (
      _seller: string,
      _validFrom: number | BN | string,
      _validTo: number | BN | string,
      _price: number | BN | string,
      _depositSe: number | BN | string,
      _depositBu: number | BN | string,
      _quantity: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _seller: string,
      _validFrom: number | BN | string,
      _validTo: number | BN | string,
      _price: number | BN | string,
      _depositSe: number | BN | string,
      _depositBu: number | BN | string,
      _quantity: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _seller: string,
      _validFrom: number | BN | string,
      _validTo: number | BN | string,
      _price: number | BN | string,
      _depositSe: number | BN | string,
      _depositBu: number | BN | string,
      _quantity: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _seller: string,
      _validFrom: number | BN | string,
      _validTo: number | BN | string,
      _price: number | BN | string,
      _depositSe: number | BN | string,
      _depositBu: number | BN | string,
      _quantity: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Creates a Payment method struct recording the details on how the seller requires to receive Price and Deposits for a certain Voucher Set.
   * @param _paymentMethod might be ETHETH, ETHTKN, TKNETH or TKNTKN
   * @param _tokenDeposits token address which will hold the funds for the deposits of the voucher
   * @param _tokenIdSupply _tokenIdSupply of the voucher set this is related to
   * @param _tokenPrice token address which will hold the funds for the price of the voucher
   */
  createPaymentMethod: {
    (
      _tokenIdSupply: number | BN | string,
      _paymentMethod: number | BN | string,
      _tokenPrice: string,
      _tokenDeposits: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _tokenIdSupply: number | BN | string,
      _paymentMethod: number | BN | string,
      _tokenPrice: string,
      _tokenDeposits: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _tokenIdSupply: number | BN | string,
      _paymentMethod: number | BN | string,
      _tokenPrice: string,
      _tokenDeposits: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _tokenIdSupply: number | BN | string,
      _paymentMethod: number | BN | string,
      _tokenPrice: string,
      _tokenDeposits: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Mark voucher token that the payment was released
   * @param _tokenIdVoucher ID of the voucher token
   */
  setPaymentReleased: {
    (
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Mark voucher token that the deposits were released
   * @param _tokenIdVoucher ID of the voucher token
   */
  setDepositsReleased: {
    (
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Token ID is derived following the same principles for both ERC-1155 and ERC-721
   * Extract a standard non-fungible tokens ERC-721 from a supply stored in ERC-1155
   * @param _issuer The address of the token issuer
   * @param _qty qty that should be burned
   * @param _tokenIdSupply ID of the token type
   */
  burnSupplyOnPause: {
    (
      _issuer: string,
      _tokenIdSupply: number | BN | string,
      _qty: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _issuer: string,
      _tokenIdSupply: number | BN | string,
      _qty: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _issuer: string,
      _tokenIdSupply: number | BN | string,
      _qty: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _issuer: string,
      _tokenIdSupply: number | BN | string,
      _qty: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Redemption of the vouchers promise
   * @param _msgSender owner of the voucher
   * @param _tokenIdVoucher ID of the voucher
   */
  redeem: {
    (
      _tokenIdVoucher: number | BN | string,
      _msgSender: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _tokenIdVoucher: number | BN | string,
      _msgSender: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _tokenIdVoucher: number | BN | string,
      _msgSender: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _tokenIdVoucher: number | BN | string,
      _msgSender: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Refunding a voucher
   * @param _msgSender owner of the voucher
   * @param _tokenIdVoucher ID of the voucher
   */
  refund: {
    (
      _tokenIdVoucher: number | BN | string,
      _msgSender: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _tokenIdVoucher: number | BN | string,
      _msgSender: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _tokenIdVoucher: number | BN | string,
      _msgSender: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _tokenIdVoucher: number | BN | string,
      _msgSender: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Issue a complain for a voucher
   * @param _msgSender owner of the voucher
   * @param _tokenIdVoucher ID of the voucher
   */
  complain: {
    (
      _tokenIdVoucher: number | BN | string,
      _msgSender: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _tokenIdVoucher: number | BN | string,
      _msgSender: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _tokenIdVoucher: number | BN | string,
      _msgSender: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _tokenIdVoucher: number | BN | string,
      _msgSender: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Cancel/Fault transaction by the Seller, admitting to a fault or backing out of the deal
   * @param _msgSender owner of the voucher set (seller)
   * @param _tokenIdVoucher ID of the voucher
   */
  cancelOrFault: {
    (
      _tokenIdVoucher: number | BN | string,
      _msgSender: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _tokenIdVoucher: number | BN | string,
      _msgSender: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _tokenIdVoucher: number | BN | string,
      _msgSender: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _tokenIdVoucher: number | BN | string,
      _msgSender: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Cancel/Fault transaction by the Seller, cancelling the remaining uncommitted voucher set so that seller prevents buyers from committing to vouchers for items no longer in exchange.
   * @param _issuer owner of the voucher
   * @param _tokenIdSupply ID of the voucher
   */
  cancelOrFaultVoucherSet: {
    (
      _tokenIdSupply: number | BN | string,
      _issuer: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _tokenIdSupply: number | BN | string,
      _issuer: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _tokenIdSupply: number | BN | string,
      _issuer: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _tokenIdSupply: number | BN | string,
      _issuer: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Fill Voucher Order, iff funds paid, then extract & mint NFT to the voucher holder
   * @param _correlationId ID of the current interaction with the smart contract for a specific user
   * @param _holder Address of the recipient of the voucher (ERC-721)
   * @param _issuer Address of the token's issuer
   * @param _paymentMethod method being used for that particular order that needs to be fulfilled
   * @param _tokenIdSupply ID of the supply token (ERC-1155)
   */
  fillOrder: {
    (
      _tokenIdSupply: number | BN | string,
      _issuer: string,
      _holder: string,
      _paymentMethod: number | BN | string,
      _correlationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _tokenIdSupply: number | BN | string,
      _issuer: string,
      _holder: string,
      _paymentMethod: number | BN | string,
      _correlationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _tokenIdSupply: number | BN | string,
      _issuer: string,
      _holder: string,
      _paymentMethod: number | BN | string,
      _correlationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _tokenIdSupply: number | BN | string,
      _issuer: string,
      _holder: string,
      _paymentMethod: number | BN | string,
      _correlationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Mark voucher token as expired
   * @param _tokenIdVoucher ID of the voucher token
   */
  triggerExpiration: {
    (
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Mark voucher token to the final status
   * @param _tokenIdVoucher ID of the voucher token
   */
  triggerFinalizeVoucher: {
    (
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Set the address of the new holder of a _tokenIdSupply on transfer
   * @param _newSeller new holder of the supply
   * @param _tokenIdSupply _tokenIdSupply which will be transferred
   */
  setSupplyHolderOnTransfer: {
    (
      _tokenIdSupply: number | BN | string,
      _newSeller: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _tokenIdSupply: number | BN | string,
      _newSeller: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _tokenIdSupply: number | BN | string,
      _newSeller: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _tokenIdSupply: number | BN | string,
      _newSeller: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Set the general cancelOrFault period, should be used sparingly as it has significant consequences. Here done simply for demo purposes.
   * @param _cancelFaultPeriod the new value for cancelOrFault period (in number of seconds)
   */
  setCancelFaultPeriod: {
    (
      _cancelFaultPeriod: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _cancelFaultPeriod: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _cancelFaultPeriod: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _cancelFaultPeriod: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Set the address of the Cashier contract
   * @param _cashierAddress The address of the Cashier contract
   */
  setCashierAddress: {
    (_cashierAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _cashierAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _cashierAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _cashierAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Set the general complain period, should be used sparingly as it has significant consequences. Here done simply for demo purposes.
   * @param _complainPeriod the new value for complain period (in number of seconds)
   */
  setComplainPeriod: {
    (
      _complainPeriod: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _complainPeriod: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _complainPeriod: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _complainPeriod: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Get the promise ID at specific index
   * @param _idx Index in the array of promise keys
   */
  getPromiseKey(
    _idx: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  /**
   * Get the address of the token where the price for the supply is held
   * @param _tokenIdSupply ID of the voucher token
   */
  getVoucherPriceToken(
    _tokenIdSupply: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  /**
   * Get the address of the token where the deposits for the supply are held
   * @param _tokenIdSupply ID of the voucher token
   */
  getVoucherDepositToken(
    _tokenIdSupply: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  /**
   * Get Buyer costs required to make an order for a supply token
   * @param _tokenIdSupply ID of the supply token
   */
  getBuyerOrderCosts(
    _tokenIdSupply: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN }>;

  /**
   * Get Seller deposit
   * @param _tokenIdSupply ID of the supply token
   */
  getSellerDeposit(
    _tokenIdSupply: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * Get the promise ID from a voucher token
   * @param _tokenIdVoucher ID of the voucher token
   */
  getIdSupplyFromVoucher(
    _tokenIdVoucher: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * Get the promise ID from a voucher token
   * @param _tokenIdVoucher ID of the voucher token
   */
  getPromiseIdFromVoucherId(
    _tokenIdVoucher: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  /**
   * Get all necessary funds for a supply token
   * @param _tokenIdSupply ID of the supply token
   */
  getOrderCosts(
    _tokenIdSupply: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN; 2: BN }>;

  /**
   * Get the remaining quantity left in supply of tokens (e.g ERC-721 left in ERC-1155) of an account
   * @param _owner holder of the Token Supply
   * @param _tokenSupplyId Token supply ID
   */
  getRemQtyForSupply(
    _tokenSupplyId: number | BN | string,
    _owner: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * Get the payment method for a particular _tokenIdSupply
   * @param _tokenIdSupply ID of the voucher supply token
   */
  getVoucherPaymentMethod(
    _tokenIdSupply: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * Get the current status of a voucher
   * @param _tokenIdVoucher ID of the voucher token
   */
  getVoucherStatus(
    _tokenIdVoucher: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: boolean; 2: boolean }>;

  /**
   * Get the holder of a supply
   * @param _tokenIdSupply ID of a promise which is mapped to the corresponding Promise
   */
  getSupplyHolder(
    _tokenIdSupply: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  /**
   * Get the holder of a voucher
   * @param _tokenIdVoucher ID of the voucher token
   */
  getVoucherHolder(
    _tokenIdVoucher: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  /**
   * Checks whether a voucher is in valid period for redemption (between start date and end date)
   * @param _tokenIdVoucher ID of the voucher token
   */
  isInValidityPeriod(
    _tokenIdVoucher: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  /**
   * Checks whether a voucher is in valid state to be transferred. If either payments or deposits are released, voucher could not be transferred
   * @param _tokenIdVoucher ID of the voucher token
   */
  isVoucherTransferable(
    _tokenIdVoucher: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  methods: {
    /**
     * Pause the process of interaction with voucherID's (ERC-721), in case of emergency. Only Cashier contract is in control of this function.
     */
    pause: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * Unpause the process of interaction with voucherID's (ERC-721). Only Cashier contract is in control of this function.
     */
    unpause: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * Creating a new promise for goods or services. Can be reused, e.g. for making different batches of these (but not in prototype).
     * @param _depositBu Buyer's deposit
     * @param _depositSe Seller's deposit
     * @param _price Price (payment amount)
     * @param _seller seller of the promise
     * @param _validFrom Start of valid period
     * @param _validTo End of valid period
     */
    createTokenSupplyID: {
      (
        _seller: string,
        _validFrom: number | BN | string,
        _validTo: number | BN | string,
        _price: number | BN | string,
        _depositSe: number | BN | string,
        _depositBu: number | BN | string,
        _quantity: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _seller: string,
        _validFrom: number | BN | string,
        _validTo: number | BN | string,
        _price: number | BN | string,
        _depositSe: number | BN | string,
        _depositBu: number | BN | string,
        _quantity: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _seller: string,
        _validFrom: number | BN | string,
        _validTo: number | BN | string,
        _price: number | BN | string,
        _depositSe: number | BN | string,
        _depositBu: number | BN | string,
        _quantity: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _seller: string,
        _validFrom: number | BN | string,
        _validTo: number | BN | string,
        _price: number | BN | string,
        _depositSe: number | BN | string,
        _depositBu: number | BN | string,
        _quantity: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Creates a Payment method struct recording the details on how the seller requires to receive Price and Deposits for a certain Voucher Set.
     * @param _paymentMethod might be ETHETH, ETHTKN, TKNETH or TKNTKN
     * @param _tokenDeposits token address which will hold the funds for the deposits of the voucher
     * @param _tokenIdSupply _tokenIdSupply of the voucher set this is related to
     * @param _tokenPrice token address which will hold the funds for the price of the voucher
     */
    createPaymentMethod: {
      (
        _tokenIdSupply: number | BN | string,
        _paymentMethod: number | BN | string,
        _tokenPrice: string,
        _tokenDeposits: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _tokenIdSupply: number | BN | string,
        _paymentMethod: number | BN | string,
        _tokenPrice: string,
        _tokenDeposits: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _tokenIdSupply: number | BN | string,
        _paymentMethod: number | BN | string,
        _tokenPrice: string,
        _tokenDeposits: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _tokenIdSupply: number | BN | string,
        _paymentMethod: number | BN | string,
        _tokenPrice: string,
        _tokenDeposits: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Mark voucher token that the payment was released
     * @param _tokenIdVoucher ID of the voucher token
     */
    setPaymentReleased: {
      (
        _tokenIdVoucher: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _tokenIdVoucher: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _tokenIdVoucher: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _tokenIdVoucher: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Mark voucher token that the deposits were released
     * @param _tokenIdVoucher ID of the voucher token
     */
    setDepositsReleased: {
      (
        _tokenIdVoucher: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _tokenIdVoucher: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _tokenIdVoucher: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _tokenIdVoucher: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Token ID is derived following the same principles for both ERC-1155 and ERC-721
     * Extract a standard non-fungible tokens ERC-721 from a supply stored in ERC-1155
     * @param _issuer The address of the token issuer
     * @param _qty qty that should be burned
     * @param _tokenIdSupply ID of the token type
     */
    burnSupplyOnPause: {
      (
        _issuer: string,
        _tokenIdSupply: number | BN | string,
        _qty: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _issuer: string,
        _tokenIdSupply: number | BN | string,
        _qty: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _issuer: string,
        _tokenIdSupply: number | BN | string,
        _qty: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _issuer: string,
        _tokenIdSupply: number | BN | string,
        _qty: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Redemption of the vouchers promise
     * @param _msgSender owner of the voucher
     * @param _tokenIdVoucher ID of the voucher
     */
    redeem: {
      (
        _tokenIdVoucher: number | BN | string,
        _msgSender: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _tokenIdVoucher: number | BN | string,
        _msgSender: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _tokenIdVoucher: number | BN | string,
        _msgSender: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _tokenIdVoucher: number | BN | string,
        _msgSender: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Refunding a voucher
     * @param _msgSender owner of the voucher
     * @param _tokenIdVoucher ID of the voucher
     */
    refund: {
      (
        _tokenIdVoucher: number | BN | string,
        _msgSender: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _tokenIdVoucher: number | BN | string,
        _msgSender: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _tokenIdVoucher: number | BN | string,
        _msgSender: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _tokenIdVoucher: number | BN | string,
        _msgSender: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Issue a complain for a voucher
     * @param _msgSender owner of the voucher
     * @param _tokenIdVoucher ID of the voucher
     */
    complain: {
      (
        _tokenIdVoucher: number | BN | string,
        _msgSender: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _tokenIdVoucher: number | BN | string,
        _msgSender: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _tokenIdVoucher: number | BN | string,
        _msgSender: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _tokenIdVoucher: number | BN | string,
        _msgSender: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Cancel/Fault transaction by the Seller, admitting to a fault or backing out of the deal
     * @param _msgSender owner of the voucher set (seller)
     * @param _tokenIdVoucher ID of the voucher
     */
    cancelOrFault: {
      (
        _tokenIdVoucher: number | BN | string,
        _msgSender: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _tokenIdVoucher: number | BN | string,
        _msgSender: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _tokenIdVoucher: number | BN | string,
        _msgSender: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _tokenIdVoucher: number | BN | string,
        _msgSender: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Cancel/Fault transaction by the Seller, cancelling the remaining uncommitted voucher set so that seller prevents buyers from committing to vouchers for items no longer in exchange.
     * @param _issuer owner of the voucher
     * @param _tokenIdSupply ID of the voucher
     */
    cancelOrFaultVoucherSet: {
      (
        _tokenIdSupply: number | BN | string,
        _issuer: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _tokenIdSupply: number | BN | string,
        _issuer: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _tokenIdSupply: number | BN | string,
        _issuer: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _tokenIdSupply: number | BN | string,
        _issuer: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Fill Voucher Order, iff funds paid, then extract & mint NFT to the voucher holder
     * @param _correlationId ID of the current interaction with the smart contract for a specific user
     * @param _holder Address of the recipient of the voucher (ERC-721)
     * @param _issuer Address of the token's issuer
     * @param _paymentMethod method being used for that particular order that needs to be fulfilled
     * @param _tokenIdSupply ID of the supply token (ERC-1155)
     */
    fillOrder: {
      (
        _tokenIdSupply: number | BN | string,
        _issuer: string,
        _holder: string,
        _paymentMethod: number | BN | string,
        _correlationId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _tokenIdSupply: number | BN | string,
        _issuer: string,
        _holder: string,
        _paymentMethod: number | BN | string,
        _correlationId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _tokenIdSupply: number | BN | string,
        _issuer: string,
        _holder: string,
        _paymentMethod: number | BN | string,
        _correlationId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _tokenIdSupply: number | BN | string,
        _issuer: string,
        _holder: string,
        _paymentMethod: number | BN | string,
        _correlationId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Mark voucher token as expired
     * @param _tokenIdVoucher ID of the voucher token
     */
    triggerExpiration: {
      (
        _tokenIdVoucher: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _tokenIdVoucher: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _tokenIdVoucher: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _tokenIdVoucher: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Mark voucher token to the final status
     * @param _tokenIdVoucher ID of the voucher token
     */
    triggerFinalizeVoucher: {
      (
        _tokenIdVoucher: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _tokenIdVoucher: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _tokenIdVoucher: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _tokenIdVoucher: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Set the address of the new holder of a _tokenIdSupply on transfer
     * @param _newSeller new holder of the supply
     * @param _tokenIdSupply _tokenIdSupply which will be transferred
     */
    setSupplyHolderOnTransfer: {
      (
        _tokenIdSupply: number | BN | string,
        _newSeller: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _tokenIdSupply: number | BN | string,
        _newSeller: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _tokenIdSupply: number | BN | string,
        _newSeller: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _tokenIdSupply: number | BN | string,
        _newSeller: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Set the general cancelOrFault period, should be used sparingly as it has significant consequences. Here done simply for demo purposes.
     * @param _cancelFaultPeriod the new value for cancelOrFault period (in number of seconds)
     */
    setCancelFaultPeriod: {
      (
        _cancelFaultPeriod: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _cancelFaultPeriod: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _cancelFaultPeriod: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _cancelFaultPeriod: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Set the address of the Cashier contract
     * @param _cashierAddress The address of the Cashier contract
     */
    setCashierAddress: {
      (
        _cashierAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _cashierAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _cashierAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _cashierAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Set the general complain period, should be used sparingly as it has significant consequences. Here done simply for demo purposes.
     * @param _complainPeriod the new value for complain period (in number of seconds)
     */
    setComplainPeriod: {
      (
        _complainPeriod: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _complainPeriod: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _complainPeriod: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _complainPeriod: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Get the promise ID at specific index
     * @param _idx Index in the array of promise keys
     */
    getPromiseKey(
      _idx: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    /**
     * Get the address of the token where the price for the supply is held
     * @param _tokenIdSupply ID of the voucher token
     */
    getVoucherPriceToken(
      _tokenIdSupply: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    /**
     * Get the address of the token where the deposits for the supply are held
     * @param _tokenIdSupply ID of the voucher token
     */
    getVoucherDepositToken(
      _tokenIdSupply: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    /**
     * Get Buyer costs required to make an order for a supply token
     * @param _tokenIdSupply ID of the supply token
     */
    getBuyerOrderCosts(
      _tokenIdSupply: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN }>;

    /**
     * Get Seller deposit
     * @param _tokenIdSupply ID of the supply token
     */
    getSellerDeposit(
      _tokenIdSupply: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Get the promise ID from a voucher token
     * @param _tokenIdVoucher ID of the voucher token
     */
    getIdSupplyFromVoucher(
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Get the promise ID from a voucher token
     * @param _tokenIdVoucher ID of the voucher token
     */
    getPromiseIdFromVoucherId(
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    /**
     * Get all necessary funds for a supply token
     * @param _tokenIdSupply ID of the supply token
     */
    getOrderCosts(
      _tokenIdSupply: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN; 2: BN }>;

    /**
     * Get the remaining quantity left in supply of tokens (e.g ERC-721 left in ERC-1155) of an account
     * @param _owner holder of the Token Supply
     * @param _tokenSupplyId Token supply ID
     */
    getRemQtyForSupply(
      _tokenSupplyId: number | BN | string,
      _owner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Get the payment method for a particular _tokenIdSupply
     * @param _tokenIdSupply ID of the voucher supply token
     */
    getVoucherPaymentMethod(
      _tokenIdSupply: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Get the current status of a voucher
     * @param _tokenIdVoucher ID of the voucher token
     */
    getVoucherStatus(
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: boolean; 2: boolean }>;

    /**
     * Get the holder of a supply
     * @param _tokenIdSupply ID of a promise which is mapped to the corresponding Promise
     */
    getSupplyHolder(
      _tokenIdSupply: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    /**
     * Get the holder of a voucher
     * @param _tokenIdVoucher ID of the voucher token
     */
    getVoucherHolder(
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    /**
     * Checks whether a voucher is in valid period for redemption (between start date and end date)
     * @param _tokenIdVoucher ID of the voucher token
     */
    isInValidityPeriod(
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    /**
     * Checks whether a voucher is in valid state to be transferred. If either payments or deposits are released, voucher could not be transferred
     * @param _tokenIdVoucher ID of the voucher token
     */
    isVoucherTransferable(
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
