/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface ERC721TokenReceiverContract
  extends Truffle.Contract<ERC721TokenReceiverInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<ERC721TokenReceiverInstance>;
}

type AllEvents = never;

export interface ERC721TokenReceiverInstance extends Truffle.ContractInstance {
  /**
   * The ERC721 smart contract calls this function on the recipient  after a `transfer`. This function MAY throw to revert and reject the  transfer. Return of other than the magic value MUST result in the  transaction being reverted.  Note: the contract address is always the message sender.
   * Handle the receipt of an NFT
   * @param _data Additional data with no specified format
   * @param _from The address which previously owned the token
   * @param _operator The address which called `safeTransferFrom` function
   * @param _tokenId The NFT identifier which is being transferred
   */
  onERC721Received: {
    (
      _operator: string,
      _from: string,
      _tokenId: number | BN | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _operator: string,
      _from: string,
      _tokenId: number | BN | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _operator: string,
      _from: string,
      _tokenId: number | BN | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _operator: string,
      _from: string,
      _tokenId: number | BN | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    /**
     * The ERC721 smart contract calls this function on the recipient  after a `transfer`. This function MAY throw to revert and reject the  transfer. Return of other than the magic value MUST result in the  transaction being reverted.  Note: the contract address is always the message sender.
     * Handle the receipt of an NFT
     * @param _data Additional data with no specified format
     * @param _from The address which previously owned the token
     * @param _operator The address which called `safeTransferFrom` function
     * @param _tokenId The NFT identifier which is being transferred
     */
    onERC721Received: {
      (
        _operator: string,
        _from: string,
        _tokenId: number | BN | string,
        _data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _operator: string,
        _from: string,
        _tokenId: number | BN | string,
        _data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        _operator: string,
        _from: string,
        _tokenId: number | BN | string,
        _data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _operator: string,
        _from: string,
        _tokenId: number | BN | string,
        _data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
