/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IERC1155ERC721Contract
  extends Truffle.Contract<IERC1155ERC721Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IERC1155ERC721Instance>;
}

export interface ApprovalForAll {
  name: "ApprovalForAll";
  args: {
    _owner: string;
    _operator: string;
    _approved: boolean;
    0: string;
    1: string;
    2: boolean;
  };
}

type AllEvents = ApprovalForAll;

export interface IERC1155ERC721Instance extends Truffle.ContractInstance {
  /**
   * ERC-1155
   * Burn an amount of tokens with the given ID
   * @param _account Account which owns the token
   * @param _tokenId ID of the token
   * @param _value Amount of the token
   */
  burn: {
    (
      _account: string,
      _tokenId: number | BN | string,
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _account: string,
      _tokenId: number | BN | string,
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _account: string,
      _tokenId: number | BN | string,
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _account: string,
      _tokenId: number | BN | string,
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    /**
     * ERC-1155
     * Burn an amount of tokens with the given ID
     * @param _account Account which owns the token
     * @param _tokenId ID of the token
     * @param _value Amount of the token
     */
    burn: {
      (
        _account: string,
        _tokenId: number | BN | string,
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _account: string,
        _tokenId: number | BN | string,
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _account: string,
        _tokenId: number | BN | string,
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _account: string,
        _tokenId: number | BN | string,
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * ERC-721
     * Function to mint tokens.
     * @param to The address that will receive the minted tokens.
     * @param tokenId The token id to mint.
     */
    "mint(address,uint256)": {
      (
        to: string,
        tokenId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        to: string,
        tokenId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        to: string,
        tokenId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        to: string,
        tokenId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * ERC-1155
     * Mint an amount of a desired token Currently no restrictions as to who is allowed to mint - so, it is external.
     * @param _data Additional data forwarded to onERC1155BatchReceived if _to is a contract
     * @param _to owner of the minted token
     * @param _tokenId ID of the token to be minted
     * @param _value Amount of the token to be minted
     */
    "mint(address,uint256,uint256,bytes)": {
      (
        _to: string,
        _tokenId: number | BN | string,
        _value: number | BN | string,
        _data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _to: string,
        _tokenId: number | BN | string,
        _value: number | BN | string,
        _data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _to: string,
        _tokenId: number | BN | string,
        _value: number | BN | string,
        _data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _to: string,
        _tokenId: number | BN | string,
        _value: number | BN | string,
        _data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
