/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface CashierContract extends Truffle.Contract<CashierInstance> {
  "new"(
    _voucherKernel: string,
    meta?: Truffle.TransactionDetails
  ): Promise<CashierInstance>;
}

export interface LogAmountDistribution {
  name: "LogAmountDistribution";
  args: {
    _tokenIdVoucher: BN;
    _to: string;
    _payment: BN;
    _type: BN;
    0: BN;
    1: string;
    2: BN;
    3: BN;
  };
}

export interface LogBosonRouterSet {
  name: "LogBosonRouterSet";
  args: {
    _newBosonRouter: string;
    _triggeredBy: string;
    0: string;
    1: string;
  };
}

export interface LogDisasterStateSet {
  name: "LogDisasterStateSet";
  args: {
    _disasterState: boolean;
    _triggeredBy: string;
    0: boolean;
    1: string;
  };
}

export interface LogWithdrawEthOnDisaster {
  name: "LogWithdrawEthOnDisaster";
  args: {
    _amount: BN;
    _triggeredBy: string;
    0: BN;
    1: string;
  };
}

export interface LogWithdrawTokensOnDisaster {
  name: "LogWithdrawTokensOnDisaster";
  args: {
    _amount: BN;
    _tokenAddress: string;
    _triggeredBy: string;
    0: BN;
    1: string;
    2: string;
  };
}

export interface LogWithdrawal {
  name: "LogWithdrawal";
  args: {
    _caller: string;
    _payee: string;
    _payment: BN;
    0: string;
    1: string;
    2: BN;
  };
}

export interface OwnershipTransferred {
  name: "OwnershipTransferred";
  args: {
    previousOwner: string;
    newOwner: string;
    0: string;
    1: string;
  };
}

export interface Paused {
  name: "Paused";
  args: {
    account: string;
    0: string;
  };
}

export interface Unpaused {
  name: "Unpaused";
  args: {
    account: string;
    0: string;
  };
}

type AllEvents =
  | LogAmountDistribution
  | LogBosonRouterSet
  | LogDisasterStateSet
  | LogWithdrawEthOnDisaster
  | LogWithdrawTokensOnDisaster
  | LogWithdrawal
  | OwnershipTransferred
  | Paused
  | Unpaused;

export interface CashierInstance extends Truffle.ContractInstance {
  bosonRouterAddress(txDetails?: Truffle.TransactionDetails): Promise<string>;

  disasterState(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  escrow(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;

  escrowTokens(
    arg0: string,
    arg1: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * Returns the address of the current owner.
   */
  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * Returns true if the contract is paused, and false otherwise.
   */
  paused(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership: {
    (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  voucherKernel(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * Pause the process of interaction with voucherID's (ERC-721), in case of emergency. Only BR contract is in control of this function.
   */
  pause: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * Unpause the process of interaction with voucherID's (ERC-721). Only BR contract is in control of this function.
   */
  unpause: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * If once disaster state has been set to true, the contract could never be unpaused.
   */
  canUnpause(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  /**
   * Once this functions is triggered, contracts cannot be unpaused anymore Only BR contract is in control of this function.
   */
  setDisasterState: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * In case of a disaster this function allow the caller to withdraw all pooled funds kept in the escrow for the address provided. Funds are sent in ETH
   */
  withdrawEthOnDisaster: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * In case of a disaster this function allow the caller to withdraw all pooled funds kept in the escrowTokens for the address provided.
   * @param token address of a token, that the caller sent the funds, while interacting with voucher or voucher-set
   */
  withdrawTokensOnDisaster: {
    (token: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(token: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      token: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * This function would be optimized a lot, here verbose for readability.
   * Trigger withdrawals of what funds are releasable The caller of this function triggers transfers to all involved entities (pool, issuer, token holder), also paying for gas.
   * @param _tokenIdVoucher ID of a voucher token (ERC-721) to try withdraw funds from
   */
  withdraw: {
    (
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * External function for withdrawing deposits. Caller must be the seller of the goods, otherwise reverts. Seller triggers withdrawals of remaining deposits for a given supply, in case the voucher set is no longer in exchange.
   * @param _burnedQty burned quantity that the deposits should be withdrawn for
   * @param _msgSender owner of the voucher set
   * @param _tokenIdSupply an ID of a supply token (ERC-1155) which will be burned and deposits will be returned for
   */
  withdrawDepositsSe: {
    (
      _tokenIdSupply: number | BN | string,
      _burnedQty: number | BN | string,
      _msgSender: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _tokenIdSupply: number | BN | string,
      _burnedQty: number | BN | string,
      _msgSender: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _tokenIdSupply: number | BN | string,
      _burnedQty: number | BN | string,
      _msgSender: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _tokenIdSupply: number | BN | string,
      _burnedQty: number | BN | string,
      _msgSender: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Set the address of the BR contract
   * @param _bosonRouterAddress The address of the Cashier contract
   */
  setBosonRouterAddress: {
    (
      _bosonRouterAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _bosonRouterAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _bosonRouterAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _bosonRouterAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Update the amount in escrow of an address with the new value, based on VoucherSet/Voucher interaction
   * @param _account The address of an account to query
   * @param _newAmount New amount to be set
   */
  updateEscrowAmount: {
    (
      _account: string,
      _newAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _account: string,
      _newAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _account: string,
      _newAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _account: string,
      _newAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Update the amount in escrow of an address with the new value, based on VoucherSet/Voucher interaction
   * @param _account The address of an account to update
   */
  addEscrowAmount: {
    (_account: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Update the amount in escrowTokens of an address with the new value, based on VoucherSet/Voucher interaction
   * @param _account The address of an account to query
   * @param _newAmount New amount to be set
   * @param _token The address of a token to query
   */
  updateEscrowTokensAmount: {
    (
      _token: string,
      _account: string,
      _newAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _token: string,
      _account: string,
      _newAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _token: string,
      _account: string,
      _newAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _token: string,
      _account: string,
      _newAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Update the amount in escrowTokens of an address with the new value, based on VoucherSet/Voucher interaction
   * @param _account The address of an account to query
   * @param _newAmount New amount to be set
   * @param _token The address of a token to query
   */
  addEscrowTokensAmount: {
    (
      _token: string,
      _account: string,
      _newAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _token: string,
      _account: string,
      _newAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _token: string,
      _account: string,
      _newAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _token: string,
      _account: string,
      _newAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Get the amount in escrow of an address
   * @param _account The address of an account to query
   */
  getEscrowAmount(
    _account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * Get the amount in escrow of an address
   * @param _account The address of an account to query
   * @param _token The address of a token to query
   */
  getEscrowTokensAmount(
    _token: string,
    _account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  methods: {
    bosonRouterAddress(txDetails?: Truffle.TransactionDetails): Promise<string>;

    disasterState(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    escrow(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;

    escrowTokens(
      arg0: string,
      arg1: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Returns the address of the current owner.
     */
    owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * Returns true if the contract is paused, and false otherwise.
     */
    paused(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership: {
      (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    voucherKernel(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * Pause the process of interaction with voucherID's (ERC-721), in case of emergency. Only BR contract is in control of this function.
     */
    pause: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * Unpause the process of interaction with voucherID's (ERC-721). Only BR contract is in control of this function.
     */
    unpause: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * If once disaster state has been set to true, the contract could never be unpaused.
     */
    canUnpause(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    /**
     * Once this functions is triggered, contracts cannot be unpaused anymore Only BR contract is in control of this function.
     */
    setDisasterState: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * In case of a disaster this function allow the caller to withdraw all pooled funds kept in the escrow for the address provided. Funds are sent in ETH
     */
    withdrawEthOnDisaster: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * In case of a disaster this function allow the caller to withdraw all pooled funds kept in the escrowTokens for the address provided.
     * @param token address of a token, that the caller sent the funds, while interacting with voucher or voucher-set
     */
    withdrawTokensOnDisaster: {
      (token: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        token: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        token: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        token: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * This function would be optimized a lot, here verbose for readability.
     * Trigger withdrawals of what funds are releasable The caller of this function triggers transfers to all involved entities (pool, issuer, token holder), also paying for gas.
     * @param _tokenIdVoucher ID of a voucher token (ERC-721) to try withdraw funds from
     */
    withdraw: {
      (
        _tokenIdVoucher: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _tokenIdVoucher: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _tokenIdVoucher: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _tokenIdVoucher: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * External function for withdrawing deposits. Caller must be the seller of the goods, otherwise reverts. Seller triggers withdrawals of remaining deposits for a given supply, in case the voucher set is no longer in exchange.
     * @param _burnedQty burned quantity that the deposits should be withdrawn for
     * @param _msgSender owner of the voucher set
     * @param _tokenIdSupply an ID of a supply token (ERC-1155) which will be burned and deposits will be returned for
     */
    withdrawDepositsSe: {
      (
        _tokenIdSupply: number | BN | string,
        _burnedQty: number | BN | string,
        _msgSender: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _tokenIdSupply: number | BN | string,
        _burnedQty: number | BN | string,
        _msgSender: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _tokenIdSupply: number | BN | string,
        _burnedQty: number | BN | string,
        _msgSender: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _tokenIdSupply: number | BN | string,
        _burnedQty: number | BN | string,
        _msgSender: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Set the address of the BR contract
     * @param _bosonRouterAddress The address of the Cashier contract
     */
    setBosonRouterAddress: {
      (
        _bosonRouterAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _bosonRouterAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _bosonRouterAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _bosonRouterAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Update the amount in escrow of an address with the new value, based on VoucherSet/Voucher interaction
     * @param _account The address of an account to query
     * @param _newAmount New amount to be set
     */
    updateEscrowAmount: {
      (
        _account: string,
        _newAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _account: string,
        _newAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _account: string,
        _newAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _account: string,
        _newAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Update the amount in escrow of an address with the new value, based on VoucherSet/Voucher interaction
     * @param _account The address of an account to update
     */
    addEscrowAmount: {
      (_account: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Update the amount in escrowTokens of an address with the new value, based on VoucherSet/Voucher interaction
     * @param _account The address of an account to query
     * @param _newAmount New amount to be set
     * @param _token The address of a token to query
     */
    updateEscrowTokensAmount: {
      (
        _token: string,
        _account: string,
        _newAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _token: string,
        _account: string,
        _newAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _token: string,
        _account: string,
        _newAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _token: string,
        _account: string,
        _newAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Update the amount in escrowTokens of an address with the new value, based on VoucherSet/Voucher interaction
     * @param _account The address of an account to query
     * @param _newAmount New amount to be set
     * @param _token The address of a token to query
     */
    addEscrowTokensAmount: {
      (
        _token: string,
        _account: string,
        _newAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _token: string,
        _account: string,
        _newAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _token: string,
        _account: string,
        _newAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _token: string,
        _account: string,
        _newAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Get the amount in escrow of an address
     * @param _account The address of an account to query
     */
    getEscrowAmount(
      _account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Get the amount in escrow of an address
     * @param _account The address of an account to query
     * @param _token The address of a token to query
     */
    getEscrowTokensAmount(
      _token: string,
      _account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
