/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IERC1155Contract extends Truffle.Contract<IERC1155Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IERC1155Instance>;
}

export interface TransferBatch {
  name: "TransferBatch";
  args: {
    _operator: string;
    _from: string;
    _to: string;
    _ids: BN[];
    _values: BN[];
    0: string;
    1: string;
    2: string;
    3: BN[];
    4: BN[];
  };
}

export interface TransferSingle {
  name: "TransferSingle";
  args: {
    _operator: string;
    _from: string;
    _to: string;
    _id: BN;
    _value: BN;
    0: string;
    1: string;
    2: string;
    3: BN;
    4: BN;
  };
}

export interface URI {
  name: "URI";
  args: {
    _value: string;
    _id: BN;
    0: string;
    1: BN;
  };
}

type AllEvents = TransferBatch | TransferSingle | URI;

export interface IERC1155Instance extends Truffle.ContractInstance {
  /**
   * Caller must be approved to manage the tokens being transferred out of the `_from` account (see "Approval" section of the standard). MUST revert if `_to` is the zero address. MUST revert if balance of holder for token `_id` is lower than the `_value` sent. MUST revert on any other error. MUST emit the `TransferSingle` event to reflect the balance change (see "Safe Transfer Rules" section of the standard). After the above conditions are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call `onERC1155Received` on `_to` and act appropriately (see "Safe Transfer Rules" section of the standard).
   * Transfers `_value` amount of an `_id` from the `_from` address to the `_to` address specified (with safety call).
   * @param _data Additional data with no specified format, MUST be sent unaltered in call to `onERC1155Received` on `_to`
   * @param _from Source address
   * @param _id ID of the token type
   * @param _to Target address
   * @param _value Transfer amount
   */
  safeTransferFrom: {
    (
      _from: string,
      _to: string,
      _id: number | BN | string,
      _value: number | BN | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _from: string,
      _to: string,
      _id: number | BN | string,
      _value: number | BN | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _from: string,
      _to: string,
      _id: number | BN | string,
      _value: number | BN | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _from: string,
      _to: string,
      _id: number | BN | string,
      _value: number | BN | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Caller must be approved to manage the tokens being transferred out of the `_from` account (see "Approval" section of the standard). MUST revert if `_to` is the zero address. MUST revert if length of `_ids` is not the same as length of `_values`. MUST revert if any of the balance(s) of the holder(s) for token(s) in `_ids` is lower than the respective amount(s) in `_values` sent to the recipient. MUST revert on any other error.         MUST emit `TransferSingle` or `TransferBatch` event(s) such that all the balance changes are reflected (see "Safe Transfer Rules" section of the standard). Balance changes and events MUST follow the ordering of the arrays (_ids[0]/_values[0] before _ids[1]/_values[1], etc). After the above conditions for the transfer(s) in the batch are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call the relevant `ERC1155TokenReceiver` hook(s) on `_to` and act appropriately (see "Safe Transfer Rules" section of the standard).
   * Transfers `_values` amount(s) of `_ids` from the `_from` address to the `_to` address specified (with safety call).
   * @param _data Additional data with no specified format, MUST be sent unaltered in call to the `ERC1155TokenReceiver` hook(s) on `_to`
   * @param _from Source address
   * @param _ids IDs of each token type (order and length must match _values array)
   * @param _to Target address
   * @param _values Transfer amounts per token type (order and length must match _ids array)
   */
  safeBatchTransferFrom: {
    (
      _from: string,
      _to: string,
      _ids: (number | BN | string)[],
      _values: (number | BN | string)[],
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _from: string,
      _to: string,
      _ids: (number | BN | string)[],
      _values: (number | BN | string)[],
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _from: string,
      _to: string,
      _ids: (number | BN | string)[],
      _values: (number | BN | string)[],
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _from: string,
      _to: string,
      _ids: (number | BN | string)[],
      _values: (number | BN | string)[],
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Get the balance of an account's tokens.
   * @param _id ID of the token
   * @param _owner The address of the token holder
   */
  balanceOf(
    _owner: string,
    _id: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * Get the balance of multiple account/token pairs
   * @param _ids ID of the tokens
   * @param _owners The addresses of the token holders
   */
  balanceOfBatch(
    _owners: string[],
    _ids: (number | BN | string)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN[]>;

  /**
   * MUST emit the ApprovalForAll event on success.
   * Enable or disable approval for a third party ("operator") to manage all of the caller's tokens.
   * @param _approved True if the operator is approved, false to revoke approval
   * @param _operator Address to add to the set of authorized operators
   */
  setApprovalForAll: {
    (
      _operator: string,
      _approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _operator: string,
      _approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _operator: string,
      _approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _operator: string,
      _approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Queries the approval status of an operator for a given owner.
   * @param _operator Address of authorized operator
   * @param _owner The owner of the tokens
   */
  isApprovedForAll(
    _owner: string,
    _operator: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  methods: {
    /**
     * Caller must be approved to manage the tokens being transferred out of the `_from` account (see "Approval" section of the standard). MUST revert if `_to` is the zero address. MUST revert if balance of holder for token `_id` is lower than the `_value` sent. MUST revert on any other error. MUST emit the `TransferSingle` event to reflect the balance change (see "Safe Transfer Rules" section of the standard). After the above conditions are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call `onERC1155Received` on `_to` and act appropriately (see "Safe Transfer Rules" section of the standard).
     * Transfers `_value` amount of an `_id` from the `_from` address to the `_to` address specified (with safety call).
     * @param _data Additional data with no specified format, MUST be sent unaltered in call to `onERC1155Received` on `_to`
     * @param _from Source address
     * @param _id ID of the token type
     * @param _to Target address
     * @param _value Transfer amount
     */
    safeTransferFrom: {
      (
        _from: string,
        _to: string,
        _id: number | BN | string,
        _value: number | BN | string,
        _data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _from: string,
        _to: string,
        _id: number | BN | string,
        _value: number | BN | string,
        _data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _from: string,
        _to: string,
        _id: number | BN | string,
        _value: number | BN | string,
        _data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _from: string,
        _to: string,
        _id: number | BN | string,
        _value: number | BN | string,
        _data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Caller must be approved to manage the tokens being transferred out of the `_from` account (see "Approval" section of the standard). MUST revert if `_to` is the zero address. MUST revert if length of `_ids` is not the same as length of `_values`. MUST revert if any of the balance(s) of the holder(s) for token(s) in `_ids` is lower than the respective amount(s) in `_values` sent to the recipient. MUST revert on any other error.         MUST emit `TransferSingle` or `TransferBatch` event(s) such that all the balance changes are reflected (see "Safe Transfer Rules" section of the standard). Balance changes and events MUST follow the ordering of the arrays (_ids[0]/_values[0] before _ids[1]/_values[1], etc). After the above conditions for the transfer(s) in the batch are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call the relevant `ERC1155TokenReceiver` hook(s) on `_to` and act appropriately (see "Safe Transfer Rules" section of the standard).
     * Transfers `_values` amount(s) of `_ids` from the `_from` address to the `_to` address specified (with safety call).
     * @param _data Additional data with no specified format, MUST be sent unaltered in call to the `ERC1155TokenReceiver` hook(s) on `_to`
     * @param _from Source address
     * @param _ids IDs of each token type (order and length must match _values array)
     * @param _to Target address
     * @param _values Transfer amounts per token type (order and length must match _ids array)
     */
    safeBatchTransferFrom: {
      (
        _from: string,
        _to: string,
        _ids: (number | BN | string)[],
        _values: (number | BN | string)[],
        _data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _from: string,
        _to: string,
        _ids: (number | BN | string)[],
        _values: (number | BN | string)[],
        _data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _from: string,
        _to: string,
        _ids: (number | BN | string)[],
        _values: (number | BN | string)[],
        _data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _from: string,
        _to: string,
        _ids: (number | BN | string)[],
        _values: (number | BN | string)[],
        _data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Get the balance of an account's tokens.
     * @param _id ID of the token
     * @param _owner The address of the token holder
     */
    balanceOf(
      _owner: string,
      _id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Get the balance of multiple account/token pairs
     * @param _ids ID of the tokens
     * @param _owners The addresses of the token holders
     */
    balanceOfBatch(
      _owners: string[],
      _ids: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN[]>;

    /**
     * MUST emit the ApprovalForAll event on success.
     * Enable or disable approval for a third party ("operator") to manage all of the caller's tokens.
     * @param _approved True if the operator is approved, false to revoke approval
     * @param _operator Address to add to the set of authorized operators
     */
    setApprovalForAll: {
      (
        _operator: string,
        _approved: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _operator: string,
        _approved: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _operator: string,
        _approved: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _operator: string,
        _approved: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Queries the approval status of an operator for a given owner.
     * @param _operator Address of authorized operator
     * @param _owner The owner of the tokens
     */
    isApprovedForAll(
      _owner: string,
      _operator: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
