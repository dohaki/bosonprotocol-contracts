/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface ICashierContract extends Truffle.Contract<ICashierInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ICashierInstance>;
}

type AllEvents = never;

export interface ICashierInstance extends Truffle.ContractInstance {
  /**
   * Pause the Cashier && the Voucher Kernel contracts in case of emergency. All functions related to creating new batch, requestVoucher or withdraw will be paused, hence cannot be executed. There is special function for withdrawing funds if contract is paused.
   */
  pause: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * Unpause the Cashier && the Voucher Kernel contracts. All functions related to creating new batch, requestVoucher or withdraw will be unpaused.
   */
  unpause: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  canUnpause(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  /**
   * This function would be optimized a lot, here verbose for readability.
   * Trigger withdrawals of what funds are releasable The caller of this function triggers transfers to all involved entities (pool, issuer, token holder), also paying for gas.
   * @param _tokenIdVoucher ID of a voucher token (ERC-721) to try withdraw funds from
   */
  withdraw: {
    (
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _tokenIdVoucher: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * External function for withdrawing deposits. Caller must be the seller of the goods, otherwise reverts.Seller triggers withdrawals of remaining deposits for a given supply, in case the voucher set is no longer in exchange.
   * @param _burnedQty burned quantity that the deposits should be withdrawn for
   * @param _msgSender owner of the voucher set
   * @param _tokenIdSupply an ID of a supply token (ERC-1155) which will be burned and deposits will be returned for
   */
  withdrawDepositsSe: {
    (
      _tokenIdSupply: number | BN | string,
      _burnedQty: number | BN | string,
      _msgSender: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _tokenIdSupply: number | BN | string,
      _burnedQty: number | BN | string,
      _msgSender: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _tokenIdSupply: number | BN | string,
      _burnedQty: number | BN | string,
      _msgSender: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _tokenIdSupply: number | BN | string,
      _burnedQty: number | BN | string,
      _msgSender: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Get the amount in escrow of an address
   * @param _account The address of an account to query
   */
  getEscrowAmount(
    _account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * Update the amount in escrow of an address with the new value, based on VoucherSet/Voucher interaction
   * @param _account The address of an account to query
   * @param _newAmount New amount to be set
   */
  updateEscrowAmount: {
    (
      _account: string,
      _newAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _account: string,
      _newAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _account: string,
      _newAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _account: string,
      _newAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Update the amount in escrow of an address with the new value, based on VoucherSet/Voucher interaction
   * @param _account The address of an account to query
   */
  addEscrowAmount: {
    (_account: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Update the amount in escrowTokens of an address with the new value, based on VoucherSet/Voucher interaction
   * @param _account The address of an account to query
   * @param _newAmount New amount to be set
   * @param _token The address of a token to query
   */
  updateEscrowTokensAmount: {
    (
      _token: string,
      _account: string,
      _newAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _token: string,
      _account: string,
      _newAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _token: string,
      _account: string,
      _newAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _token: string,
      _account: string,
      _newAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Update the amount in escrowTokens of an address with the new value, based on VoucherSet/Voucher interaction
   * @param _account The address of an account to query
   * @param _newAmount New amount to be set
   * @param _token The address of a token to query
   */
  addEscrowTokensAmount: {
    (
      _token: string,
      _account: string,
      _newAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _token: string,
      _account: string,
      _newAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _token: string,
      _account: string,
      _newAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _token: string,
      _account: string,
      _newAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Get the amount in escrow of an address
   * @param _account The address of an account to query
   * @param _token The address of a token to query
   */
  getEscrowTokensAmount(
    _token: string,
    _account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * Set the address of the BR contract
   * @param _bosonRouterAddress The address of the Cashier contract
   */
  setBosonRouterAddress: {
    (
      _bosonRouterAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _bosonRouterAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _bosonRouterAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _bosonRouterAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    /**
     * Pause the Cashier && the Voucher Kernel contracts in case of emergency. All functions related to creating new batch, requestVoucher or withdraw will be paused, hence cannot be executed. There is special function for withdrawing funds if contract is paused.
     */
    pause: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * Unpause the Cashier && the Voucher Kernel contracts. All functions related to creating new batch, requestVoucher or withdraw will be unpaused.
     */
    unpause: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    canUnpause(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    /**
     * This function would be optimized a lot, here verbose for readability.
     * Trigger withdrawals of what funds are releasable The caller of this function triggers transfers to all involved entities (pool, issuer, token holder), also paying for gas.
     * @param _tokenIdVoucher ID of a voucher token (ERC-721) to try withdraw funds from
     */
    withdraw: {
      (
        _tokenIdVoucher: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _tokenIdVoucher: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _tokenIdVoucher: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _tokenIdVoucher: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * External function for withdrawing deposits. Caller must be the seller of the goods, otherwise reverts.Seller triggers withdrawals of remaining deposits for a given supply, in case the voucher set is no longer in exchange.
     * @param _burnedQty burned quantity that the deposits should be withdrawn for
     * @param _msgSender owner of the voucher set
     * @param _tokenIdSupply an ID of a supply token (ERC-1155) which will be burned and deposits will be returned for
     */
    withdrawDepositsSe: {
      (
        _tokenIdSupply: number | BN | string,
        _burnedQty: number | BN | string,
        _msgSender: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _tokenIdSupply: number | BN | string,
        _burnedQty: number | BN | string,
        _msgSender: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _tokenIdSupply: number | BN | string,
        _burnedQty: number | BN | string,
        _msgSender: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _tokenIdSupply: number | BN | string,
        _burnedQty: number | BN | string,
        _msgSender: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Get the amount in escrow of an address
     * @param _account The address of an account to query
     */
    getEscrowAmount(
      _account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Update the amount in escrow of an address with the new value, based on VoucherSet/Voucher interaction
     * @param _account The address of an account to query
     * @param _newAmount New amount to be set
     */
    updateEscrowAmount: {
      (
        _account: string,
        _newAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _account: string,
        _newAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _account: string,
        _newAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _account: string,
        _newAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Update the amount in escrow of an address with the new value, based on VoucherSet/Voucher interaction
     * @param _account The address of an account to query
     */
    addEscrowAmount: {
      (_account: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Update the amount in escrowTokens of an address with the new value, based on VoucherSet/Voucher interaction
     * @param _account The address of an account to query
     * @param _newAmount New amount to be set
     * @param _token The address of a token to query
     */
    updateEscrowTokensAmount: {
      (
        _token: string,
        _account: string,
        _newAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _token: string,
        _account: string,
        _newAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _token: string,
        _account: string,
        _newAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _token: string,
        _account: string,
        _newAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Update the amount in escrowTokens of an address with the new value, based on VoucherSet/Voucher interaction
     * @param _account The address of an account to query
     * @param _newAmount New amount to be set
     * @param _token The address of a token to query
     */
    addEscrowTokensAmount: {
      (
        _token: string,
        _account: string,
        _newAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _token: string,
        _account: string,
        _newAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _token: string,
        _account: string,
        _newAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _token: string,
        _account: string,
        _newAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Get the amount in escrow of an address
     * @param _account The address of an account to query
     * @param _token The address of a token to query
     */
    getEscrowTokensAmount(
      _token: string,
      _account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Set the address of the BR contract
     * @param _bosonRouterAddress The address of the Cashier contract
     */
    setBosonRouterAddress: {
      (
        _bosonRouterAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _bosonRouterAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _bosonRouterAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _bosonRouterAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
